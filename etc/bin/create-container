#!/usr/bin/env python3
# Create a new container. This is still super rudimentary
# Usage: create-container --name <container name> --image <image name> --x11 <x11 | nxagent> --color rrr,ggg,bbb

from sys import path
path.append("/mnt/libcitadel")

from citadel.utils.logger import create_logger
from citadel.incus.containers import create_instance, attach_network
from citadel.incus.networking import create_network
from citadel.firewall.firewalld import add_interface_to_trusted, reload_firewall

from argparse import ArgumentParser
from subprocess import run

logger = create_logger("citadel")

parser = ArgumentParser(prog="create-container", description="Create a new citadel container")
parser.add_argument("--name", required=True, help="Name of the container")
parser.add_argument("--image", required=True, help="Image to use")
parser.add_argument("--x11", required=True, help="What x11 instance to use")
parser.add_argument("--color", required=True, help="Tint of exported application icons")

args = parser.parse_args()

profiles = ["protected", "citadel", "backup", "rootdisk", "security", "pulseaudio"]

if args.x11 == "x11":
    profiles.extend(["x11", "gpu"])
elif args.x11 == "nxagent":
    profiles.append("nxagent")
else:
    raise RuntimeError("--x11 has to either be x11 or nxagent")

create_instance(args.name, args.image, profiles)
run(["incus", "config", "set", args.name, "user.citadel.color", args.color], check=True)
create_network(args.name, "bridge")
attach_network(args.name, args.name)
add_interface_to_trusted(args.name)
reload_firewall()