#!/usr/bin/env python3
# Sync the desktop files from inside the containers to the local desktop, patching them as neccessary. This is typically called via systemd service and timer

from sys import path
path.insert(0, "/mnt/sync-desktop-no-container-start/libcitadel")

from os import makedirs, symlink
from os.path import basename, isabs, join, exists, splitext, isdir, isfile
from pathlib import Path
from configparser import RawConfigParser
from io import StringIO
from typing import Optional, cast
from tempfile import TemporaryDirectory
from time import sleep
from re import match, escape

from citadel.utils.logger import create_logger
from citadel.desktop.notify import show_desktop_notification
from citadel.incus.containers import Container, get_containers, mount_container_fs
from citadel.desktop.icon import color_icon
from citadel.utils.misc import replace_file_ending, prepend_to_path, list_dir_absolute, read_file, read_file_binary, walk_absolute
from citadel.utils.async_process import stop_process
from citadel.utils.exception_handler import install_exception_handler
from citadel.desktop.notify import show_desktop_notification

install_exception_handler()

logger = create_logger("citadel_desktop_sync")

def get_applications_folder_path_for_container(container_name: str) -> str:
    return Path("/usr/share/citadel/exports/applications").joinpath(container_name).as_posix()

def get_icon_folder_path_for_container(container_name: str) -> str:
    return Path("/usr/share/citadel/exports/icons").joinpath(container_name).as_posix()

def get_color_for_container(container_name: str) -> tuple[int, int, int]:
    containers = get_containers()
    container = cast(Container, list(filter(lambda container: container.name == container_name, containers))[0])
    config_property = cast(str, container.raw["config"]["user.citadel.color"])
    color_parts = config_property.split(",")
    return (int(color_parts[0]), int(color_parts[1]), int(color_parts[2]))

def get_icon_path_from_hicolor(icon_name: str, root_mount_point: str) -> Optional[str]:
    container_hicolor_path = prepend_to_path("/usr/share/icons/hicolor", root_mount_point)
    find_output = walk_absolute(container_hicolor_path)
    return next(filter(lambda file_path: isfile(file_path) and match(f"^{escape(icon_name)}\\.(?:png|jpg|jpeg)$", basename(file_path)), find_output), None)

def get_icon_path(root_mount_point: str, icon_name: str) -> Optional[str]:
    if isabs(icon_name):
        logger.info("Original icon path (%s) is already absolute. Done", icon_name)
        return icon_name
    logger.info("Searching for icon in hicolor theme")
    return get_icon_path_from_hicolor(icon_name, root_mount_point)

def copy_patched_icon_to_host(container_name: str, icon_path: str) -> str:
    icon_bytes = read_file_binary(icon_path)
    icon_bytes = color_icon(icon_bytes, get_color_for_container(container_name))
    host_path = join(get_icon_folder_path_for_container(container_name), basename(icon_path))
    with open(host_path, "wb") as file:
        file.write(icon_bytes)
    return host_path

def patch_desktop_file(desktop_file: RawConfigParser, container_name: str, icon_path: Optional[str], uid: int) -> RawConfigParser:
    for section_name in desktop_file.sections():
        desktop_file.remove_option(section_name, "TryExec")
        if "Exec" in desktop_file[section_name].keys():
            desktop_file[section_name]["Exec"] = f"run-container {container_name} {uid} {desktop_file[section_name]["Exec"]}"
        if "Name" in desktop_file[section_name].keys():
            desktop_file[section_name]["Name"] = f"{desktop_file[section_name]['Name']} on {container_name}"
        if "Icon" in desktop_file[section_name].keys():
            if icon_path is None:
                desktop_file.remove_option(section_name, "Icon")
            else:
                desktop_file[section_name]["Icon"] = replace_file_ending(icon_path, ".png")
    return desktop_file

def parse_desktop_file(file_contents: str) -> RawConfigParser:
    index_theme = RawConfigParser()
    index_theme.optionxform = str
    index_theme.read_string(file_contents)
    return index_theme

def stringify_desktop_file(desktop_file: RawConfigParser) -> str:
    stringIO = StringIO()
    desktop_file.write(stringIO, space_around_delimiters=False)
    return stringIO.getvalue()

def sync_desktop_entries(container_name: str, root_mount_point: str) -> None:
    applications_folder_path = get_applications_folder_path_for_container(container_name)
    icons_folder_path = get_icon_folder_path_for_container(container_name)
    makedirs(applications_folder_path, exist_ok=True)
    makedirs(icons_folder_path, exist_ok=True)
    # Folders to look in for desktop files
    container_desktop_folder_paths = ["/usr/share/applications", "/home/citadel/.local/share/applications", "/var/lib/flatpak/exports/share/applications", "/home/citadel/.local/share/flatpak/exports/share/applications"]
    # Prepend the root mount point to paths
    container_desktop_folder_paths = list(map(lambda path: prepend_to_path(path, root_mount_point), container_desktop_folder_paths))
    for container_desktop_folder_path in container_desktop_folder_paths:
        if not isdir(container_desktop_folder_path):
            logger.info("Skipping application search directory %s since it does not exist", container_desktop_folder_path)            
            continue
        for container_desktop_file_path in list_dir_absolute(container_desktop_folder_path):
            if splitext(container_desktop_file_path)[1] != ".desktop":
                continue
            logger.info("Synchronizing %s", container_desktop_file_path)
            host_desktop_file_path = join(applications_folder_path, basename(container_desktop_file_path))
        
            if(exists(host_desktop_file_path)):
                logger.info("Skipping %s, since it is already exists", container_desktop_file_path)
                continue
        
            desktop_file_contents = read_file(container_desktop_file_path)
            desktop_file = parse_desktop_file(desktop_file_contents)

            if "Icon" in desktop_file["Desktop Entry"].keys():
                container_icon_path = get_icon_path(root_mount_point, desktop_file["Desktop Entry"]["Icon"])
                if container_icon_path is not None:
                    host_icon_file_path = replace_file_ending(join(get_icon_folder_path_for_container(container_name), basename(container_icon_path)), ".png")
                    try:
                        copy_patched_icon_to_host(container_name, container_icon_path)
                        desktop_file = patch_desktop_file(desktop_file, container_name, host_icon_file_path, 1000)
                    except ValueError:
                        desktop_file = patch_desktop_file(desktop_file, container_name, None, 1000)
                else:
                    desktop_file = patch_desktop_file(desktop_file, container_name, None, 1000)
            else:
                desktop_file = patch_desktop_file(desktop_file, container_name, None, 1000)
    
            logger.info("Writing patched desktop file to host filesystem")
            with open(host_desktop_file_path, "w") as file:
                file.write(stringify_desktop_file(desktop_file))

            logger.info("Symlinking desktop file")
            symlink(host_desktop_file_path, join("/usr/share/applications", f"{container_name}@{basename(host_desktop_file_path)}"))

show_desktop_notification("Citadel", "Synchronizing desktop entries")

containers = get_containers()

for container in containers:
    logger.info("Syncing desktop entries for container %s", container.name)
    with TemporaryDirectory() as tmpdir:
        logger.info("Mounting container rootfs to %s", tmpdir)
        process_name = mount_container_fs(container.name, "/", tmpdir)
        show_desktop_notification(f"Syncing desktop", f"Syncing desktop entries for {container.name}")
        # For some odd reason we need this delay or no directories will be found
        sleep(1)
        sync_desktop_entries(container.name, tmpdir)
        logger.info("Unmounting container rootfs from %s and process name %s", tmpdir, process_name)
        stop_process(process_name)
        # For some odd reason we need this delay or the tmpdir will not be removed and throw an error instead
        sleep(1)
    show_desktop_notification(f"Syncing desktop", f"Syncing desktop entries completed for {container.name}")

show_desktop_notification("Citadel", "Synchronizing complete")
logger.info("Sync completed")